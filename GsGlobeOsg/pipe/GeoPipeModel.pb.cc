// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GeoPipeModel.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GeoPipeModel.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace GEOPIPEMODEL {
class PIPEDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PIPE>
     _instance;
} _PIPE_default_instance_;
class StringTableDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<StringTable>
     _instance;
} _StringTable_default_instance_;
class PIPETileDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PIPETile>
     _instance;
} _PIPETile_default_instance_;

namespace protobuf_GeoPipeModel_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _PIPE_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PIPE_default_instance_);_StringTable_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_StringTable_default_instance_);_PIPETile_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PIPETile_default_instance_);_PIPETile_default_instance_._instance.get_mutable()->stringtable_ = const_cast< ::GEOPIPEMODEL::StringTable*>(
      ::GEOPIPEMODEL::StringTable::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_GeoPipeModel_2eproto

bool enumGeometryType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

bool enumScetionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PIPE::kFeatureIDFieldNumber;
const int PIPE::kGeometryTypeFieldNumber;
const int PIPE::kCoordinatesFieldNumber;
const int PIPE::kAttitudesFieldNumber;
const int PIPE::kSymbolIDFieldNumber;
const int PIPE::kStartPointIDFieldNumber;
const int PIPE::kEndPointIDFieldNumber;
const int PIPE::kScetionTypeFieldNumber;
const int PIPE::kCaliberFieldNumber;
const int PIPE::kHeightFieldNumber;
const int PIPE::kWidthFieldNumber;
const int PIPE::kLayerNameFieldNumber;
const int PIPE::kNewFeatureIDFieldNumber;
const int PIPE::kNewStartPointIDFieldNumber;
const int PIPE::kNewEndPointIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PIPE::PIPE()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_GeoPipeModel_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GEOPIPEMODEL.PIPE)
}
PIPE::PIPE(const PIPE& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      coordinates_(from.coordinates_),
      attitudes_(from.attitudes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  layername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_layername()) {
    layername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.layername_);
  }
  newfeatureid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_newfeatureid()) {
    newfeatureid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.newfeatureid_);
  }
  newstartpointid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_newstartpointid()) {
    newstartpointid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.newstartpointid_);
  }
  newendpointid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_newendpointid()) {
    newendpointid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.newendpointid_);
  }
  ::memcpy(&featureid_, &from.featureid_,
    static_cast<size_t>(reinterpret_cast<char*>(&width_) -
    reinterpret_cast<char*>(&featureid_)) + sizeof(width_));
  // @@protoc_insertion_point(copy_constructor:GEOPIPEMODEL.PIPE)
}

void PIPE::SharedCtor() {
  _cached_size_ = 0;
  layername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  newfeatureid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  newstartpointid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  newendpointid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&featureid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&width_) -
      reinterpret_cast<char*>(&featureid_)) + sizeof(width_));
}

PIPE::~PIPE() {
  // @@protoc_insertion_point(destructor:GEOPIPEMODEL.PIPE)
  SharedDtor();
}

void PIPE::SharedDtor() {
  layername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  newfeatureid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  newstartpointid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  newendpointid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PIPE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PIPE& PIPE::default_instance() {
  protobuf_GeoPipeModel_2eproto::InitDefaults();
  return *internal_default_instance();
}

PIPE* PIPE::New(::google::protobuf::Arena* arena) const {
  PIPE* n = new PIPE;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PIPE::Clear() {
// @@protoc_insertion_point(message_clear_start:GEOPIPEMODEL.PIPE)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  coordinates_.Clear();
  attitudes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!layername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*layername_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!newfeatureid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*newfeatureid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!newstartpointid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*newstartpointid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!newendpointid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*newendpointid_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&featureid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&scetiontype_) -
        reinterpret_cast<char*>(&featureid_)) + sizeof(scetiontype_));
  }
  if (cached_has_bits & 7936u) {
    ::memset(&startpointid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&width_) -
        reinterpret_cast<char*>(&startpointid_)) + sizeof(width_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PIPE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:GEOPIPEMODEL.PIPE)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 FeatureID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_featureid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &featureid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .GEOPIPEMODEL.enumGeometryType GeometryType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GEOPIPEMODEL::enumGeometryType_IsValid(value)) {
            set_geometrytype(static_cast< ::GEOPIPEMODEL::enumGeometryType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double Coordinates = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25u, input, this->mutable_coordinates())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_coordinates())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double Attitudes = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 33u, input, this->mutable_attitudes())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_attitudes())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 SymbolID = 11 [default = 0];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_symbolid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 StartPointID = 21 [default = 0];
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_startpointid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &startpointid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 EndPointID = 22 [default = 0];
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_endpointid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endpointid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GEOPIPEMODEL.enumScetionType ScetionType = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GEOPIPEMODEL::enumScetionType_IsValid(value)) {
            set_scetiontype(static_cast< ::GEOPIPEMODEL::enumScetionType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(184u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double Caliber = 24 [default = 0];
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(193u /* 193 & 0xFF */)) {
          set_has_caliber();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &caliber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double Height = 25 [default = 0];
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(201u /* 201 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double Width = 26 [default = 0];
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(209u /* 209 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string LayerName = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 250 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_layername()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string NewFeatureID = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 258 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newfeatureid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string NewStartPointID = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 266 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newstartpointid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string NewEndPointID = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 274 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newendpointid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GEOPIPEMODEL.PIPE)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GEOPIPEMODEL.PIPE)
  return false;
#undef DO_
}

void PIPE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GEOPIPEMODEL.PIPE)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 FeatureID = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->featureid(), output);
  }

  // required .GEOPIPEMODEL.enumGeometryType GeometryType = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->geometrytype(), output);
  }

  // repeated double Coordinates = 3;
  for (int i = 0, n = this->coordinates_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->coordinates(i), output);
  }

  // repeated double Attitudes = 4;
  for (int i = 0, n = this->attitudes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      4, this->attitudes(i), output);
  }

  // optional uint64 SymbolID = 11 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->symbolid(), output);
  }

  // optional uint64 StartPointID = 21 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(21, this->startpointid(), output);
  }

  // optional uint64 EndPointID = 22 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(22, this->endpointid(), output);
  }

  // optional .GEOPIPEMODEL.enumScetionType ScetionType = 23;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      23, this->scetiontype(), output);
  }

  // optional double Caliber = 24 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->caliber(), output);
  }

  // optional double Height = 25 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->height(), output);
  }

  // optional double Width = 26 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->width(), output);
  }

  // optional string LayerName = 31;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      31, this->layername(), output);
  }

  // optional string NewFeatureID = 32;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      32, this->newfeatureid(), output);
  }

  // optional string NewStartPointID = 33;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      33, this->newstartpointid(), output);
  }

  // optional string NewEndPointID = 34;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      34, this->newendpointid(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:GEOPIPEMODEL.PIPE)
}

size_t PIPE::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GEOPIPEMODEL.PIPE)
  size_t total_size = 0;

  if (has_featureid()) {
    // required uint64 FeatureID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->featureid());
  }

  if (has_geometrytype()) {
    // required .GEOPIPEMODEL.enumGeometryType GeometryType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->geometrytype());
  }

  return total_size;
}
size_t PIPE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GEOPIPEMODEL.PIPE)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000050) ^ 0x00000050) == 0) {  // All required fields are present.
    // required uint64 FeatureID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->featureid());

    // required .GEOPIPEMODEL.enumGeometryType GeometryType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->geometrytype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated double Coordinates = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->coordinates_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->coordinates_size());
    total_size += data_size;
  }

  // repeated double Attitudes = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->attitudes_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->attitudes_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional string LayerName = 31;
    if (has_layername()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->layername());
    }

    // optional string NewFeatureID = 32;
    if (has_newfeatureid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newfeatureid());
    }

    // optional string NewStartPointID = 33;
    if (has_newstartpointid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newstartpointid());
    }

    // optional string NewEndPointID = 34;
    if (has_newendpointid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newendpointid());
    }

  }
  // optional uint64 SymbolID = 11 [default = 0];
  if (has_symbolid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->symbolid());
  }

  // optional .GEOPIPEMODEL.enumScetionType ScetionType = 23;
  if (has_scetiontype()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->scetiontype());
  }

  if (_has_bits_[8 / 32] & 7936u) {
    // optional uint64 StartPointID = 21 [default = 0];
    if (has_startpointid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->startpointid());
    }

    // optional uint64 EndPointID = 22 [default = 0];
    if (has_endpointid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->endpointid());
    }

    // optional double Caliber = 24 [default = 0];
    if (has_caliber()) {
      total_size += 2 + 8;
    }

    // optional double Height = 25 [default = 0];
    if (has_height()) {
      total_size += 2 + 8;
    }

    // optional double Width = 26 [default = 0];
    if (has_width()) {
      total_size += 2 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PIPE::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PIPE*>(&from));
}

void PIPE::MergeFrom(const PIPE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GEOPIPEMODEL.PIPE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  coordinates_.MergeFrom(from.coordinates_);
  attitudes_.MergeFrom(from.attitudes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_layername();
      layername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.layername_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_newfeatureid();
      newfeatureid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.newfeatureid_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_newstartpointid();
      newstartpointid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.newstartpointid_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_newendpointid();
      newendpointid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.newendpointid_);
    }
    if (cached_has_bits & 0x00000010u) {
      featureid_ = from.featureid_;
    }
    if (cached_has_bits & 0x00000020u) {
      symbolid_ = from.symbolid_;
    }
    if (cached_has_bits & 0x00000040u) {
      geometrytype_ = from.geometrytype_;
    }
    if (cached_has_bits & 0x00000080u) {
      scetiontype_ = from.scetiontype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      startpointid_ = from.startpointid_;
    }
    if (cached_has_bits & 0x00000200u) {
      endpointid_ = from.endpointid_;
    }
    if (cached_has_bits & 0x00000400u) {
      caliber_ = from.caliber_;
    }
    if (cached_has_bits & 0x00000800u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00001000u) {
      width_ = from.width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PIPE::CopyFrom(const PIPE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GEOPIPEMODEL.PIPE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PIPE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000050) != 0x00000050) return false;
  return true;
}

void PIPE::Swap(PIPE* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PIPE::InternalSwap(PIPE* other) {
  using std::swap;
  coordinates_.InternalSwap(&other->coordinates_);
  attitudes_.InternalSwap(&other->attitudes_);
  layername_.Swap(&other->layername_);
  newfeatureid_.Swap(&other->newfeatureid_);
  newstartpointid_.Swap(&other->newstartpointid_);
  newendpointid_.Swap(&other->newendpointid_);
  swap(featureid_, other->featureid_);
  swap(symbolid_, other->symbolid_);
  swap(geometrytype_, other->geometrytype_);
  swap(scetiontype_, other->scetiontype_);
  swap(startpointid_, other->startpointid_);
  swap(endpointid_, other->endpointid_);
  swap(caliber_, other->caliber_);
  swap(height_, other->height_);
  swap(width_, other->width_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string PIPE::GetTypeName() const {
  return "GEOPIPEMODEL.PIPE";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PIPE

// required uint64 FeatureID = 1;
bool PIPE::has_featureid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PIPE::set_has_featureid() {
  _has_bits_[0] |= 0x00000010u;
}
void PIPE::clear_has_featureid() {
  _has_bits_[0] &= ~0x00000010u;
}
void PIPE::clear_featureid() {
  featureid_ = GOOGLE_ULONGLONG(0);
  clear_has_featureid();
}
::google::protobuf::uint64 PIPE::featureid() const {
  // @@protoc_insertion_point(field_get:GEOPIPEMODEL.PIPE.FeatureID)
  return featureid_;
}
void PIPE::set_featureid(::google::protobuf::uint64 value) {
  set_has_featureid();
  featureid_ = value;
  // @@protoc_insertion_point(field_set:GEOPIPEMODEL.PIPE.FeatureID)
}

// required .GEOPIPEMODEL.enumGeometryType GeometryType = 2;
bool PIPE::has_geometrytype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PIPE::set_has_geometrytype() {
  _has_bits_[0] |= 0x00000040u;
}
void PIPE::clear_has_geometrytype() {
  _has_bits_[0] &= ~0x00000040u;
}
void PIPE::clear_geometrytype() {
  geometrytype_ = 0;
  clear_has_geometrytype();
}
::GEOPIPEMODEL::enumGeometryType PIPE::geometrytype() const {
  // @@protoc_insertion_point(field_get:GEOPIPEMODEL.PIPE.GeometryType)
  return static_cast< ::GEOPIPEMODEL::enumGeometryType >(geometrytype_);
}
void PIPE::set_geometrytype(::GEOPIPEMODEL::enumGeometryType value) {
  assert(::GEOPIPEMODEL::enumGeometryType_IsValid(value));
  set_has_geometrytype();
  geometrytype_ = value;
  // @@protoc_insertion_point(field_set:GEOPIPEMODEL.PIPE.GeometryType)
}

// repeated double Coordinates = 3;
int PIPE::coordinates_size() const {
  return coordinates_.size();
}
void PIPE::clear_coordinates() {
  coordinates_.Clear();
}
double PIPE::coordinates(int index) const {
  // @@protoc_insertion_point(field_get:GEOPIPEMODEL.PIPE.Coordinates)
  return coordinates_.Get(index);
}
void PIPE::set_coordinates(int index, double value) {
  coordinates_.Set(index, value);
  // @@protoc_insertion_point(field_set:GEOPIPEMODEL.PIPE.Coordinates)
}
void PIPE::add_coordinates(double value) {
  coordinates_.Add(value);
  // @@protoc_insertion_point(field_add:GEOPIPEMODEL.PIPE.Coordinates)
}
const ::google::protobuf::RepeatedField< double >&
PIPE::coordinates() const {
  // @@protoc_insertion_point(field_list:GEOPIPEMODEL.PIPE.Coordinates)
  return coordinates_;
}
::google::protobuf::RepeatedField< double >*
PIPE::mutable_coordinates() {
  // @@protoc_insertion_point(field_mutable_list:GEOPIPEMODEL.PIPE.Coordinates)
  return &coordinates_;
}

// repeated double Attitudes = 4;
int PIPE::attitudes_size() const {
  return attitudes_.size();
}
void PIPE::clear_attitudes() {
  attitudes_.Clear();
}
double PIPE::attitudes(int index) const {
  // @@protoc_insertion_point(field_get:GEOPIPEMODEL.PIPE.Attitudes)
  return attitudes_.Get(index);
}
void PIPE::set_attitudes(int index, double value) {
  attitudes_.Set(index, value);
  // @@protoc_insertion_point(field_set:GEOPIPEMODEL.PIPE.Attitudes)
}
void PIPE::add_attitudes(double value) {
  attitudes_.Add(value);
  // @@protoc_insertion_point(field_add:GEOPIPEMODEL.PIPE.Attitudes)
}
const ::google::protobuf::RepeatedField< double >&
PIPE::attitudes() const {
  // @@protoc_insertion_point(field_list:GEOPIPEMODEL.PIPE.Attitudes)
  return attitudes_;
}
::google::protobuf::RepeatedField< double >*
PIPE::mutable_attitudes() {
  // @@protoc_insertion_point(field_mutable_list:GEOPIPEMODEL.PIPE.Attitudes)
  return &attitudes_;
}

// optional uint64 SymbolID = 11 [default = 0];
bool PIPE::has_symbolid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PIPE::set_has_symbolid() {
  _has_bits_[0] |= 0x00000020u;
}
void PIPE::clear_has_symbolid() {
  _has_bits_[0] &= ~0x00000020u;
}
void PIPE::clear_symbolid() {
  symbolid_ = GOOGLE_ULONGLONG(0);
  clear_has_symbolid();
}
::google::protobuf::uint64 PIPE::symbolid() const {
  // @@protoc_insertion_point(field_get:GEOPIPEMODEL.PIPE.SymbolID)
  return symbolid_;
}
void PIPE::set_symbolid(::google::protobuf::uint64 value) {
  set_has_symbolid();
  symbolid_ = value;
  // @@protoc_insertion_point(field_set:GEOPIPEMODEL.PIPE.SymbolID)
}

// optional uint64 StartPointID = 21 [default = 0];
bool PIPE::has_startpointid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PIPE::set_has_startpointid() {
  _has_bits_[0] |= 0x00000100u;
}
void PIPE::clear_has_startpointid() {
  _has_bits_[0] &= ~0x00000100u;
}
void PIPE::clear_startpointid() {
  startpointid_ = GOOGLE_ULONGLONG(0);
  clear_has_startpointid();
}
::google::protobuf::uint64 PIPE::startpointid() const {
  // @@protoc_insertion_point(field_get:GEOPIPEMODEL.PIPE.StartPointID)
  return startpointid_;
}
void PIPE::set_startpointid(::google::protobuf::uint64 value) {
  set_has_startpointid();
  startpointid_ = value;
  // @@protoc_insertion_point(field_set:GEOPIPEMODEL.PIPE.StartPointID)
}

// optional uint64 EndPointID = 22 [default = 0];
bool PIPE::has_endpointid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void PIPE::set_has_endpointid() {
  _has_bits_[0] |= 0x00000200u;
}
void PIPE::clear_has_endpointid() {
  _has_bits_[0] &= ~0x00000200u;
}
void PIPE::clear_endpointid() {
  endpointid_ = GOOGLE_ULONGLONG(0);
  clear_has_endpointid();
}
::google::protobuf::uint64 PIPE::endpointid() const {
  // @@protoc_insertion_point(field_get:GEOPIPEMODEL.PIPE.EndPointID)
  return endpointid_;
}
void PIPE::set_endpointid(::google::protobuf::uint64 value) {
  set_has_endpointid();
  endpointid_ = value;
  // @@protoc_insertion_point(field_set:GEOPIPEMODEL.PIPE.EndPointID)
}

// optional .GEOPIPEMODEL.enumScetionType ScetionType = 23;
bool PIPE::has_scetiontype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PIPE::set_has_scetiontype() {
  _has_bits_[0] |= 0x00000080u;
}
void PIPE::clear_has_scetiontype() {
  _has_bits_[0] &= ~0x00000080u;
}
void PIPE::clear_scetiontype() {
  scetiontype_ = 0;
  clear_has_scetiontype();
}
::GEOPIPEMODEL::enumScetionType PIPE::scetiontype() const {
  // @@protoc_insertion_point(field_get:GEOPIPEMODEL.PIPE.ScetionType)
  return static_cast< ::GEOPIPEMODEL::enumScetionType >(scetiontype_);
}
void PIPE::set_scetiontype(::GEOPIPEMODEL::enumScetionType value) {
  assert(::GEOPIPEMODEL::enumScetionType_IsValid(value));
  set_has_scetiontype();
  scetiontype_ = value;
  // @@protoc_insertion_point(field_set:GEOPIPEMODEL.PIPE.ScetionType)
}

// optional double Caliber = 24 [default = 0];
bool PIPE::has_caliber() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void PIPE::set_has_caliber() {
  _has_bits_[0] |= 0x00000400u;
}
void PIPE::clear_has_caliber() {
  _has_bits_[0] &= ~0x00000400u;
}
void PIPE::clear_caliber() {
  caliber_ = 0;
  clear_has_caliber();
}
double PIPE::caliber() const {
  // @@protoc_insertion_point(field_get:GEOPIPEMODEL.PIPE.Caliber)
  return caliber_;
}
void PIPE::set_caliber(double value) {
  set_has_caliber();
  caliber_ = value;
  // @@protoc_insertion_point(field_set:GEOPIPEMODEL.PIPE.Caliber)
}

// optional double Height = 25 [default = 0];
bool PIPE::has_height() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void PIPE::set_has_height() {
  _has_bits_[0] |= 0x00000800u;
}
void PIPE::clear_has_height() {
  _has_bits_[0] &= ~0x00000800u;
}
void PIPE::clear_height() {
  height_ = 0;
  clear_has_height();
}
double PIPE::height() const {
  // @@protoc_insertion_point(field_get:GEOPIPEMODEL.PIPE.Height)
  return height_;
}
void PIPE::set_height(double value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:GEOPIPEMODEL.PIPE.Height)
}

// optional double Width = 26 [default = 0];
bool PIPE::has_width() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void PIPE::set_has_width() {
  _has_bits_[0] |= 0x00001000u;
}
void PIPE::clear_has_width() {
  _has_bits_[0] &= ~0x00001000u;
}
void PIPE::clear_width() {
  width_ = 0;
  clear_has_width();
}
double PIPE::width() const {
  // @@protoc_insertion_point(field_get:GEOPIPEMODEL.PIPE.Width)
  return width_;
}
void PIPE::set_width(double value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:GEOPIPEMODEL.PIPE.Width)
}

// optional string LayerName = 31;
bool PIPE::has_layername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PIPE::set_has_layername() {
  _has_bits_[0] |= 0x00000001u;
}
void PIPE::clear_has_layername() {
  _has_bits_[0] &= ~0x00000001u;
}
void PIPE::clear_layername() {
  layername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_layername();
}
const ::std::string& PIPE::layername() const {
  // @@protoc_insertion_point(field_get:GEOPIPEMODEL.PIPE.LayerName)
  return layername_.GetNoArena();
}
void PIPE::set_layername(const ::std::string& value) {
  set_has_layername();
  layername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GEOPIPEMODEL.PIPE.LayerName)
}
#if LANG_CXX11
void PIPE::set_layername(::std::string&& value) {
  set_has_layername();
  layername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GEOPIPEMODEL.PIPE.LayerName)
}
#endif
void PIPE::set_layername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_layername();
  layername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GEOPIPEMODEL.PIPE.LayerName)
}
void PIPE::set_layername(const char* value, size_t size) {
  set_has_layername();
  layername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GEOPIPEMODEL.PIPE.LayerName)
}
::std::string* PIPE::mutable_layername() {
  set_has_layername();
  // @@protoc_insertion_point(field_mutable:GEOPIPEMODEL.PIPE.LayerName)
  return layername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PIPE::release_layername() {
  // @@protoc_insertion_point(field_release:GEOPIPEMODEL.PIPE.LayerName)
  clear_has_layername();
  return layername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PIPE::set_allocated_layername(::std::string* layername) {
  if (layername != NULL) {
    set_has_layername();
  } else {
    clear_has_layername();
  }
  layername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), layername);
  // @@protoc_insertion_point(field_set_allocated:GEOPIPEMODEL.PIPE.LayerName)
}

// optional string NewFeatureID = 32;
bool PIPE::has_newfeatureid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PIPE::set_has_newfeatureid() {
  _has_bits_[0] |= 0x00000002u;
}
void PIPE::clear_has_newfeatureid() {
  _has_bits_[0] &= ~0x00000002u;
}
void PIPE::clear_newfeatureid() {
  newfeatureid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_newfeatureid();
}
const ::std::string& PIPE::newfeatureid() const {
  // @@protoc_insertion_point(field_get:GEOPIPEMODEL.PIPE.NewFeatureID)
  return newfeatureid_.GetNoArena();
}
void PIPE::set_newfeatureid(const ::std::string& value) {
  set_has_newfeatureid();
  newfeatureid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GEOPIPEMODEL.PIPE.NewFeatureID)
}
#if LANG_CXX11
void PIPE::set_newfeatureid(::std::string&& value) {
  set_has_newfeatureid();
  newfeatureid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GEOPIPEMODEL.PIPE.NewFeatureID)
}
#endif
void PIPE::set_newfeatureid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_newfeatureid();
  newfeatureid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GEOPIPEMODEL.PIPE.NewFeatureID)
}
void PIPE::set_newfeatureid(const char* value, size_t size) {
  set_has_newfeatureid();
  newfeatureid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GEOPIPEMODEL.PIPE.NewFeatureID)
}
::std::string* PIPE::mutable_newfeatureid() {
  set_has_newfeatureid();
  // @@protoc_insertion_point(field_mutable:GEOPIPEMODEL.PIPE.NewFeatureID)
  return newfeatureid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PIPE::release_newfeatureid() {
  // @@protoc_insertion_point(field_release:GEOPIPEMODEL.PIPE.NewFeatureID)
  clear_has_newfeatureid();
  return newfeatureid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PIPE::set_allocated_newfeatureid(::std::string* newfeatureid) {
  if (newfeatureid != NULL) {
    set_has_newfeatureid();
  } else {
    clear_has_newfeatureid();
  }
  newfeatureid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), newfeatureid);
  // @@protoc_insertion_point(field_set_allocated:GEOPIPEMODEL.PIPE.NewFeatureID)
}

// optional string NewStartPointID = 33;
bool PIPE::has_newstartpointid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PIPE::set_has_newstartpointid() {
  _has_bits_[0] |= 0x00000004u;
}
void PIPE::clear_has_newstartpointid() {
  _has_bits_[0] &= ~0x00000004u;
}
void PIPE::clear_newstartpointid() {
  newstartpointid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_newstartpointid();
}
const ::std::string& PIPE::newstartpointid() const {
  // @@protoc_insertion_point(field_get:GEOPIPEMODEL.PIPE.NewStartPointID)
  return newstartpointid_.GetNoArena();
}
void PIPE::set_newstartpointid(const ::std::string& value) {
  set_has_newstartpointid();
  newstartpointid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GEOPIPEMODEL.PIPE.NewStartPointID)
}
#if LANG_CXX11
void PIPE::set_newstartpointid(::std::string&& value) {
  set_has_newstartpointid();
  newstartpointid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GEOPIPEMODEL.PIPE.NewStartPointID)
}
#endif
void PIPE::set_newstartpointid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_newstartpointid();
  newstartpointid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GEOPIPEMODEL.PIPE.NewStartPointID)
}
void PIPE::set_newstartpointid(const char* value, size_t size) {
  set_has_newstartpointid();
  newstartpointid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GEOPIPEMODEL.PIPE.NewStartPointID)
}
::std::string* PIPE::mutable_newstartpointid() {
  set_has_newstartpointid();
  // @@protoc_insertion_point(field_mutable:GEOPIPEMODEL.PIPE.NewStartPointID)
  return newstartpointid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PIPE::release_newstartpointid() {
  // @@protoc_insertion_point(field_release:GEOPIPEMODEL.PIPE.NewStartPointID)
  clear_has_newstartpointid();
  return newstartpointid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PIPE::set_allocated_newstartpointid(::std::string* newstartpointid) {
  if (newstartpointid != NULL) {
    set_has_newstartpointid();
  } else {
    clear_has_newstartpointid();
  }
  newstartpointid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), newstartpointid);
  // @@protoc_insertion_point(field_set_allocated:GEOPIPEMODEL.PIPE.NewStartPointID)
}

// optional string NewEndPointID = 34;
bool PIPE::has_newendpointid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PIPE::set_has_newendpointid() {
  _has_bits_[0] |= 0x00000008u;
}
void PIPE::clear_has_newendpointid() {
  _has_bits_[0] &= ~0x00000008u;
}
void PIPE::clear_newendpointid() {
  newendpointid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_newendpointid();
}
const ::std::string& PIPE::newendpointid() const {
  // @@protoc_insertion_point(field_get:GEOPIPEMODEL.PIPE.NewEndPointID)
  return newendpointid_.GetNoArena();
}
void PIPE::set_newendpointid(const ::std::string& value) {
  set_has_newendpointid();
  newendpointid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GEOPIPEMODEL.PIPE.NewEndPointID)
}
#if LANG_CXX11
void PIPE::set_newendpointid(::std::string&& value) {
  set_has_newendpointid();
  newendpointid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GEOPIPEMODEL.PIPE.NewEndPointID)
}
#endif
void PIPE::set_newendpointid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_newendpointid();
  newendpointid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GEOPIPEMODEL.PIPE.NewEndPointID)
}
void PIPE::set_newendpointid(const char* value, size_t size) {
  set_has_newendpointid();
  newendpointid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GEOPIPEMODEL.PIPE.NewEndPointID)
}
::std::string* PIPE::mutable_newendpointid() {
  set_has_newendpointid();
  // @@protoc_insertion_point(field_mutable:GEOPIPEMODEL.PIPE.NewEndPointID)
  return newendpointid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PIPE::release_newendpointid() {
  // @@protoc_insertion_point(field_release:GEOPIPEMODEL.PIPE.NewEndPointID)
  clear_has_newendpointid();
  return newendpointid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PIPE::set_allocated_newendpointid(::std::string* newendpointid) {
  if (newendpointid != NULL) {
    set_has_newendpointid();
  } else {
    clear_has_newendpointid();
  }
  newendpointid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), newendpointid);
  // @@protoc_insertion_point(field_set_allocated:GEOPIPEMODEL.PIPE.NewEndPointID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StringTable::kSFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StringTable::StringTable()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_GeoPipeModel_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GEOPIPEMODEL.StringTable)
}
StringTable::StringTable(const StringTable& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      s_(from.s_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GEOPIPEMODEL.StringTable)
}

void StringTable::SharedCtor() {
  _cached_size_ = 0;
}

StringTable::~StringTable() {
  // @@protoc_insertion_point(destructor:GEOPIPEMODEL.StringTable)
  SharedDtor();
}

void StringTable::SharedDtor() {
}

void StringTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StringTable& StringTable::default_instance() {
  protobuf_GeoPipeModel_2eproto::InitDefaults();
  return *internal_default_instance();
}

StringTable* StringTable::New(::google::protobuf::Arena* arena) const {
  StringTable* n = new StringTable;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StringTable::Clear() {
// @@protoc_insertion_point(message_clear_start:GEOPIPEMODEL.StringTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  s_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StringTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:GEOPIPEMODEL.StringTable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string s = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_s()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GEOPIPEMODEL.StringTable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GEOPIPEMODEL.StringTable)
  return false;
#undef DO_
}

void StringTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GEOPIPEMODEL.StringTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string s = 1;
  for (int i = 0, n = this->s_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->s(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:GEOPIPEMODEL.StringTable)
}

size_t StringTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GEOPIPEMODEL.StringTable)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated string s = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->s_size());
  for (int i = 0, n = this->s_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->s(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StringTable::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StringTable*>(&from));
}

void StringTable::MergeFrom(const StringTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GEOPIPEMODEL.StringTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  s_.MergeFrom(from.s_);
}

void StringTable::CopyFrom(const StringTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GEOPIPEMODEL.StringTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringTable::IsInitialized() const {
  return true;
}

void StringTable::Swap(StringTable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StringTable::InternalSwap(StringTable* other) {
  using std::swap;
  s_.InternalSwap(&other->s_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string StringTable::GetTypeName() const {
  return "GEOPIPEMODEL.StringTable";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StringTable

// repeated string s = 1;
int StringTable::s_size() const {
  return s_.size();
}
void StringTable::clear_s() {
  s_.Clear();
}
const ::std::string& StringTable::s(int index) const {
  // @@protoc_insertion_point(field_get:GEOPIPEMODEL.StringTable.s)
  return s_.Get(index);
}
::std::string* StringTable::mutable_s(int index) {
  // @@protoc_insertion_point(field_mutable:GEOPIPEMODEL.StringTable.s)
  return s_.Mutable(index);
}
void StringTable::set_s(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:GEOPIPEMODEL.StringTable.s)
  s_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void StringTable::set_s(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:GEOPIPEMODEL.StringTable.s)
  s_.Mutable(index)->assign(std::move(value));
}
#endif
void StringTable::set_s(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  s_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:GEOPIPEMODEL.StringTable.s)
}
void StringTable::set_s(int index, const char* value, size_t size) {
  s_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GEOPIPEMODEL.StringTable.s)
}
::std::string* StringTable::add_s() {
  // @@protoc_insertion_point(field_add_mutable:GEOPIPEMODEL.StringTable.s)
  return s_.Add();
}
void StringTable::add_s(const ::std::string& value) {
  s_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:GEOPIPEMODEL.StringTable.s)
}
#if LANG_CXX11
void StringTable::add_s(::std::string&& value) {
  s_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:GEOPIPEMODEL.StringTable.s)
}
#endif
void StringTable::add_s(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  s_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:GEOPIPEMODEL.StringTable.s)
}
void StringTable::add_s(const char* value, size_t size) {
  s_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:GEOPIPEMODEL.StringTable.s)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
StringTable::s() const {
  // @@protoc_insertion_point(field_list:GEOPIPEMODEL.StringTable.s)
  return s_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
StringTable::mutable_s() {
  // @@protoc_insertion_point(field_mutable_list:GEOPIPEMODEL.StringTable.s)
  return &s_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PIPETile::kVersionFieldNumber;
const int PIPETile::kTileKeyFieldNumber;
const int PIPETile::kStringTableFieldNumber;
const int PIPETile::kPIPESFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PIPETile::PIPETile()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_GeoPipeModel_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GEOPIPEMODEL.PIPETile)
}
PIPETile::PIPETile(const PIPETile& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      pipes_(from.pipes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_stringtable()) {
    stringtable_ = new ::GEOPIPEMODEL::StringTable(*from.stringtable_);
  } else {
    stringtable_ = NULL;
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&tilekey_) -
    reinterpret_cast<char*>(&version_)) + sizeof(tilekey_));
  // @@protoc_insertion_point(copy_constructor:GEOPIPEMODEL.PIPETile)
}

void PIPETile::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&stringtable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tilekey_) -
      reinterpret_cast<char*>(&stringtable_)) + sizeof(tilekey_));
}

PIPETile::~PIPETile() {
  // @@protoc_insertion_point(destructor:GEOPIPEMODEL.PIPETile)
  SharedDtor();
}

void PIPETile::SharedDtor() {
  if (this != internal_default_instance()) delete stringtable_;
}

void PIPETile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PIPETile& PIPETile::default_instance() {
  protobuf_GeoPipeModel_2eproto::InitDefaults();
  return *internal_default_instance();
}

PIPETile* PIPETile::New(::google::protobuf::Arena* arena) const {
  PIPETile* n = new PIPETile;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PIPETile::Clear() {
// @@protoc_insertion_point(message_clear_start:GEOPIPEMODEL.PIPETile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pipes_.Clear();
  if (has_stringtable()) {
    GOOGLE_DCHECK(stringtable_ != NULL);
    stringtable_->::GEOPIPEMODEL::StringTable::Clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 6u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tilekey_) -
        reinterpret_cast<char*>(&version_)) + sizeof(tilekey_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PIPETile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:GEOPIPEMODEL.PIPETile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 Version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 TileKey = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_tilekey();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tilekey_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .GEOPIPEMODEL.StringTable StringTable = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stringtable()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .GEOPIPEMODEL.PIPE PIPES = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pipes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GEOPIPEMODEL.PIPETile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GEOPIPEMODEL.PIPETile)
  return false;
#undef DO_
}

void PIPETile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GEOPIPEMODEL.PIPETile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 Version = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->version(), output);
  }

  // required int64 TileKey = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->tilekey(), output);
  }

  // required .GEOPIPEMODEL.StringTable StringTable = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->stringtable_, output);
  }

  // repeated .GEOPIPEMODEL.PIPE PIPES = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pipes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->pipes(static_cast<int>(i)), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:GEOPIPEMODEL.PIPETile)
}

size_t PIPETile::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GEOPIPEMODEL.PIPETile)
  size_t total_size = 0;

  if (has_stringtable()) {
    // required .GEOPIPEMODEL.StringTable StringTable = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stringtable_);
  }

  if (has_version()) {
    // required int64 Version = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->version());
  }

  if (has_tilekey()) {
    // required int64 TileKey = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tilekey());
  }

  return total_size;
}
size_t PIPETile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GEOPIPEMODEL.PIPETile)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .GEOPIPEMODEL.StringTable StringTable = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stringtable_);

    // required int64 Version = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->version());

    // required int64 TileKey = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tilekey());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .GEOPIPEMODEL.PIPE PIPES = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->pipes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pipes(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PIPETile::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PIPETile*>(&from));
}

void PIPETile::MergeFrom(const PIPETile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GEOPIPEMODEL.PIPETile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pipes_.MergeFrom(from.pipes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_stringtable()->::GEOPIPEMODEL::StringTable::MergeFrom(from.stringtable());
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000004u) {
      tilekey_ = from.tilekey_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PIPETile::CopyFrom(const PIPETile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GEOPIPEMODEL.PIPETile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PIPETile::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->pipes())) return false;
  return true;
}

void PIPETile::Swap(PIPETile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PIPETile::InternalSwap(PIPETile* other) {
  using std::swap;
  pipes_.InternalSwap(&other->pipes_);
  swap(stringtable_, other->stringtable_);
  swap(version_, other->version_);
  swap(tilekey_, other->tilekey_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string PIPETile::GetTypeName() const {
  return "GEOPIPEMODEL.PIPETile";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PIPETile

// required int64 Version = 1;
bool PIPETile::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PIPETile::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
void PIPETile::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void PIPETile::clear_version() {
  version_ = GOOGLE_LONGLONG(0);
  clear_has_version();
}
::google::protobuf::int64 PIPETile::version() const {
  // @@protoc_insertion_point(field_get:GEOPIPEMODEL.PIPETile.Version)
  return version_;
}
void PIPETile::set_version(::google::protobuf::int64 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:GEOPIPEMODEL.PIPETile.Version)
}

// required int64 TileKey = 2;
bool PIPETile::has_tilekey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PIPETile::set_has_tilekey() {
  _has_bits_[0] |= 0x00000004u;
}
void PIPETile::clear_has_tilekey() {
  _has_bits_[0] &= ~0x00000004u;
}
void PIPETile::clear_tilekey() {
  tilekey_ = GOOGLE_LONGLONG(0);
  clear_has_tilekey();
}
::google::protobuf::int64 PIPETile::tilekey() const {
  // @@protoc_insertion_point(field_get:GEOPIPEMODEL.PIPETile.TileKey)
  return tilekey_;
}
void PIPETile::set_tilekey(::google::protobuf::int64 value) {
  set_has_tilekey();
  tilekey_ = value;
  // @@protoc_insertion_point(field_set:GEOPIPEMODEL.PIPETile.TileKey)
}

// required .GEOPIPEMODEL.StringTable StringTable = 3;
bool PIPETile::has_stringtable() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PIPETile::set_has_stringtable() {
  _has_bits_[0] |= 0x00000001u;
}
void PIPETile::clear_has_stringtable() {
  _has_bits_[0] &= ~0x00000001u;
}
void PIPETile::clear_stringtable() {
  if (stringtable_ != NULL) stringtable_->::GEOPIPEMODEL::StringTable::Clear();
  clear_has_stringtable();
}
const ::GEOPIPEMODEL::StringTable& PIPETile::stringtable() const {
  const ::GEOPIPEMODEL::StringTable* p = stringtable_;
  // @@protoc_insertion_point(field_get:GEOPIPEMODEL.PIPETile.StringTable)
  return p != NULL ? *p : *reinterpret_cast<const ::GEOPIPEMODEL::StringTable*>(
      &::GEOPIPEMODEL::_StringTable_default_instance_);
}
::GEOPIPEMODEL::StringTable* PIPETile::mutable_stringtable() {
  set_has_stringtable();
  if (stringtable_ == NULL) {
    stringtable_ = new ::GEOPIPEMODEL::StringTable;
  }
  // @@protoc_insertion_point(field_mutable:GEOPIPEMODEL.PIPETile.StringTable)
  return stringtable_;
}
::GEOPIPEMODEL::StringTable* PIPETile::release_stringtable() {
  // @@protoc_insertion_point(field_release:GEOPIPEMODEL.PIPETile.StringTable)
  clear_has_stringtable();
  ::GEOPIPEMODEL::StringTable* temp = stringtable_;
  stringtable_ = NULL;
  return temp;
}
void PIPETile::set_allocated_stringtable(::GEOPIPEMODEL::StringTable* stringtable) {
  delete stringtable_;
  stringtable_ = stringtable;
  if (stringtable) {
    set_has_stringtable();
  } else {
    clear_has_stringtable();
  }
  // @@protoc_insertion_point(field_set_allocated:GEOPIPEMODEL.PIPETile.StringTable)
}

// repeated .GEOPIPEMODEL.PIPE PIPES = 4;
int PIPETile::pipes_size() const {
  return pipes_.size();
}
void PIPETile::clear_pipes() {
  pipes_.Clear();
}
const ::GEOPIPEMODEL::PIPE& PIPETile::pipes(int index) const {
  // @@protoc_insertion_point(field_get:GEOPIPEMODEL.PIPETile.PIPES)
  return pipes_.Get(index);
}
::GEOPIPEMODEL::PIPE* PIPETile::mutable_pipes(int index) {
  // @@protoc_insertion_point(field_mutable:GEOPIPEMODEL.PIPETile.PIPES)
  return pipes_.Mutable(index);
}
::GEOPIPEMODEL::PIPE* PIPETile::add_pipes() {
  // @@protoc_insertion_point(field_add:GEOPIPEMODEL.PIPETile.PIPES)
  return pipes_.Add();
}
::google::protobuf::RepeatedPtrField< ::GEOPIPEMODEL::PIPE >*
PIPETile::mutable_pipes() {
  // @@protoc_insertion_point(field_mutable_list:GEOPIPEMODEL.PIPETile.PIPES)
  return &pipes_;
}
const ::google::protobuf::RepeatedPtrField< ::GEOPIPEMODEL::PIPE >&
PIPETile::pipes() const {
  // @@protoc_insertion_point(field_list:GEOPIPEMODEL.PIPETile.PIPES)
  return pipes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace GEOPIPEMODEL

// @@protoc_insertion_point(global_scope)
