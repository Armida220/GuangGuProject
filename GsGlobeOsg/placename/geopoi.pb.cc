// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: geopoi.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "geopoi.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace GEOPOI {
class PBPOIDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PBPOI>
     _instance;
} _PBPOI_default_instance_;
class StringTableDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<StringTable>
     _instance;
} _StringTable_default_instance_;
class PBPOITileDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PBPOITile>
     _instance;
} _PBPOITile_default_instance_;

namespace protobuf_geopoi_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _PBPOI_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PBPOI_default_instance_);_StringTable_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_StringTable_default_instance_);_PBPOITile_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PBPOITile_default_instance_);_PBPOITile_default_instance_._instance.get_mutable()->stringtable_ = const_cast< ::GEOPOI::StringTable*>(
      ::GEOPOI::StringTable::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_geopoi_2eproto

bool enumGeometryType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBPOI::kOIDFieldNumber;
const int PBPOI::kNameFieldNumber;
const int PBPOI::kCoordinatesFieldNumber;
const int PBPOI::kGeometryTypeFieldNumber;
const int PBPOI::kInterateFieldNumber;
const int PBPOI::kSymbolIDFieldNumber;
const int PBPOI::kDisplayHeightFieldNumber;
const int PBPOI::kShiningColorFieldNumber;
const int PBPOI::kFontNameIndexFieldNumber;
const int PBPOI::kFontSizeFieldNumber;
const int PBPOI::kFontColorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBPOI::PBPOI()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_geopoi_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GEOPOI.PBPOI)
}
PBPOI::PBPOI(const PBPOI& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      coordinates_(from.coordinates_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&oid_, &from.oid_,
    static_cast<size_t>(reinterpret_cast<char*>(&displayheight_) -
    reinterpret_cast<char*>(&oid_)) + sizeof(displayheight_));
  // @@protoc_insertion_point(copy_constructor:GEOPOI.PBPOI)
}

void PBPOI::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&oid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fontcolor_) -
      reinterpret_cast<char*>(&oid_)) + sizeof(fontcolor_));
  fontsize_ = 18;
  displayheight_ = 32;
}

PBPOI::~PBPOI() {
  // @@protoc_insertion_point(destructor:GEOPOI.PBPOI)
  SharedDtor();
}

void PBPOI::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PBPOI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PBPOI& PBPOI::default_instance() {
  protobuf_geopoi_2eproto::InitDefaults();
  return *internal_default_instance();
}

PBPOI* PBPOI::New(::google::protobuf::Arena* arena) const {
  PBPOI* n = new PBPOI;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBPOI::Clear() {
// @@protoc_insertion_point(message_clear_start:GEOPOI.PBPOI)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  coordinates_.Clear();
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 254u) {
    ::memset(&oid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fontcolor_) -
        reinterpret_cast<char*>(&oid_)) + sizeof(fontcolor_));
  }
  if (cached_has_bits & 768u) {
    fontsize_ = 18;
    displayheight_ = 32;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PBPOI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:GEOPOI.PBPOI)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 OID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_oid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &oid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string Name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double Coordinates = 3 [packed = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_coordinates())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 26u, input, this->mutable_coordinates())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .GEOPOI.enumGeometryType GeometryType = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GEOPOI::enumGeometryType_IsValid(value)) {
            set_geometrytype(static_cast< ::GEOPOI::enumGeometryType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 Interate = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_interate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &interate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 SymbolID = 10 [default = 0];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_symbolid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double DisplayHeight = 11 [default = 32];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_displayheight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &displayheight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ShiningColor = 12 [default = 0];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_shiningcolor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shiningcolor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 FontNameIndex = 13 [default = 0];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_fontnameindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fontnameindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 FontSize = 14 [default = 18];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_fontsize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fontsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 FontColor = 15 [default = 0];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_fontcolor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fontcolor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GEOPOI.PBPOI)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GEOPOI.PBPOI)
  return false;
#undef DO_
}

void PBPOI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GEOPOI.PBPOI)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 OID = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->oid(), output);
  }

  // required string Name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // repeated double Coordinates = 3 [packed = true];
  if (this->coordinates_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _coordinates_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->coordinates().data(), this->coordinates_size(), output);
  }

  // required .GEOPOI.enumGeometryType GeometryType = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->geometrytype(), output);
  }

  // optional int32 Interate = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->interate(), output);
  }

  // optional int32 SymbolID = 10 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->symbolid(), output);
  }

  // optional double DisplayHeight = 11 [default = 32];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->displayheight(), output);
  }

  // optional uint32 ShiningColor = 12 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->shiningcolor(), output);
  }

  // optional uint32 FontNameIndex = 13 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->fontnameindex(), output);
  }

  // optional int32 FontSize = 14 [default = 18];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->fontsize(), output);
  }

  // optional uint32 FontColor = 15 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->fontcolor(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:GEOPOI.PBPOI)
}

size_t PBPOI::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GEOPOI.PBPOI)
  size_t total_size = 0;

  if (has_name()) {
    // required string Name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_oid()) {
    // required uint64 OID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->oid());
  }

  if (has_geometrytype()) {
    // required .GEOPOI.enumGeometryType GeometryType = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->geometrytype());
  }

  return total_size;
}
size_t PBPOI::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GEOPOI.PBPOI)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string Name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required uint64 OID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->oid());

    // required .GEOPOI.enumGeometryType GeometryType = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->geometrytype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated double Coordinates = 3 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->coordinates_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _coordinates_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 248u) {
    // optional int32 Interate = 5;
    if (has_interate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->interate());
    }

    // optional int32 SymbolID = 10 [default = 0];
    if (has_symbolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->symbolid());
    }

    // optional uint32 ShiningColor = 12 [default = 0];
    if (has_shiningcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shiningcolor());
    }

    // optional uint32 FontNameIndex = 13 [default = 0];
    if (has_fontnameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fontnameindex());
    }

    // optional uint32 FontColor = 15 [default = 0];
    if (has_fontcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fontcolor());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional int32 FontSize = 14 [default = 18];
    if (has_fontsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fontsize());
    }

    // optional double DisplayHeight = 11 [default = 32];
    if (has_displayheight()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPOI::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PBPOI*>(&from));
}

void PBPOI::MergeFrom(const PBPOI& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GEOPOI.PBPOI)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  coordinates_.MergeFrom(from.coordinates_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      oid_ = from.oid_;
    }
    if (cached_has_bits & 0x00000004u) {
      geometrytype_ = from.geometrytype_;
    }
    if (cached_has_bits & 0x00000008u) {
      interate_ = from.interate_;
    }
    if (cached_has_bits & 0x00000010u) {
      symbolid_ = from.symbolid_;
    }
    if (cached_has_bits & 0x00000020u) {
      shiningcolor_ = from.shiningcolor_;
    }
    if (cached_has_bits & 0x00000040u) {
      fontnameindex_ = from.fontnameindex_;
    }
    if (cached_has_bits & 0x00000080u) {
      fontcolor_ = from.fontcolor_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      fontsize_ = from.fontsize_;
    }
    if (cached_has_bits & 0x00000200u) {
      displayheight_ = from.displayheight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PBPOI::CopyFrom(const PBPOI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GEOPOI.PBPOI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPOI::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void PBPOI::Swap(PBPOI* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBPOI::InternalSwap(PBPOI* other) {
  using std::swap;
  coordinates_.InternalSwap(&other->coordinates_);
  name_.Swap(&other->name_);
  swap(oid_, other->oid_);
  swap(geometrytype_, other->geometrytype_);
  swap(interate_, other->interate_);
  swap(symbolid_, other->symbolid_);
  swap(shiningcolor_, other->shiningcolor_);
  swap(fontnameindex_, other->fontnameindex_);
  swap(fontcolor_, other->fontcolor_);
  swap(fontsize_, other->fontsize_);
  swap(displayheight_, other->displayheight_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string PBPOI::GetTypeName() const {
  return "GEOPOI.PBPOI";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBPOI

// required uint64 OID = 1;
bool PBPOI::has_oid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PBPOI::set_has_oid() {
  _has_bits_[0] |= 0x00000002u;
}
void PBPOI::clear_has_oid() {
  _has_bits_[0] &= ~0x00000002u;
}
void PBPOI::clear_oid() {
  oid_ = GOOGLE_ULONGLONG(0);
  clear_has_oid();
}
::google::protobuf::uint64 PBPOI::oid() const {
  // @@protoc_insertion_point(field_get:GEOPOI.PBPOI.OID)
  return oid_;
}
void PBPOI::set_oid(::google::protobuf::uint64 value) {
  set_has_oid();
  oid_ = value;
  // @@protoc_insertion_point(field_set:GEOPOI.PBPOI.OID)
}

// required string Name = 2;
bool PBPOI::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PBPOI::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void PBPOI::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void PBPOI::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& PBPOI::name() const {
  // @@protoc_insertion_point(field_get:GEOPOI.PBPOI.Name)
  return name_.GetNoArena();
}
void PBPOI::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GEOPOI.PBPOI.Name)
}
#if LANG_CXX11
void PBPOI::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GEOPOI.PBPOI.Name)
}
#endif
void PBPOI::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GEOPOI.PBPOI.Name)
}
void PBPOI::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GEOPOI.PBPOI.Name)
}
::std::string* PBPOI::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:GEOPOI.PBPOI.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PBPOI::release_name() {
  // @@protoc_insertion_point(field_release:GEOPOI.PBPOI.Name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PBPOI::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:GEOPOI.PBPOI.Name)
}

// repeated double Coordinates = 3 [packed = true];
int PBPOI::coordinates_size() const {
  return coordinates_.size();
}
void PBPOI::clear_coordinates() {
  coordinates_.Clear();
}
double PBPOI::coordinates(int index) const {
  // @@protoc_insertion_point(field_get:GEOPOI.PBPOI.Coordinates)
  return coordinates_.Get(index);
}
void PBPOI::set_coordinates(int index, double value) {
  coordinates_.Set(index, value);
  // @@protoc_insertion_point(field_set:GEOPOI.PBPOI.Coordinates)
}
void PBPOI::add_coordinates(double value) {
  coordinates_.Add(value);
  // @@protoc_insertion_point(field_add:GEOPOI.PBPOI.Coordinates)
}
const ::google::protobuf::RepeatedField< double >&
PBPOI::coordinates() const {
  // @@protoc_insertion_point(field_list:GEOPOI.PBPOI.Coordinates)
  return coordinates_;
}
::google::protobuf::RepeatedField< double >*
PBPOI::mutable_coordinates() {
  // @@protoc_insertion_point(field_mutable_list:GEOPOI.PBPOI.Coordinates)
  return &coordinates_;
}

// required .GEOPOI.enumGeometryType GeometryType = 4;
bool PBPOI::has_geometrytype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PBPOI::set_has_geometrytype() {
  _has_bits_[0] |= 0x00000004u;
}
void PBPOI::clear_has_geometrytype() {
  _has_bits_[0] &= ~0x00000004u;
}
void PBPOI::clear_geometrytype() {
  geometrytype_ = 0;
  clear_has_geometrytype();
}
::GEOPOI::enumGeometryType PBPOI::geometrytype() const {
  // @@protoc_insertion_point(field_get:GEOPOI.PBPOI.GeometryType)
  return static_cast< ::GEOPOI::enumGeometryType >(geometrytype_);
}
void PBPOI::set_geometrytype(::GEOPOI::enumGeometryType value) {
  assert(::GEOPOI::enumGeometryType_IsValid(value));
  set_has_geometrytype();
  geometrytype_ = value;
  // @@protoc_insertion_point(field_set:GEOPOI.PBPOI.GeometryType)
}

// optional int32 Interate = 5;
bool PBPOI::has_interate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PBPOI::set_has_interate() {
  _has_bits_[0] |= 0x00000008u;
}
void PBPOI::clear_has_interate() {
  _has_bits_[0] &= ~0x00000008u;
}
void PBPOI::clear_interate() {
  interate_ = 0;
  clear_has_interate();
}
::google::protobuf::int32 PBPOI::interate() const {
  // @@protoc_insertion_point(field_get:GEOPOI.PBPOI.Interate)
  return interate_;
}
void PBPOI::set_interate(::google::protobuf::int32 value) {
  set_has_interate();
  interate_ = value;
  // @@protoc_insertion_point(field_set:GEOPOI.PBPOI.Interate)
}

// optional int32 SymbolID = 10 [default = 0];
bool PBPOI::has_symbolid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PBPOI::set_has_symbolid() {
  _has_bits_[0] |= 0x00000010u;
}
void PBPOI::clear_has_symbolid() {
  _has_bits_[0] &= ~0x00000010u;
}
void PBPOI::clear_symbolid() {
  symbolid_ = 0;
  clear_has_symbolid();
}
::google::protobuf::int32 PBPOI::symbolid() const {
  // @@protoc_insertion_point(field_get:GEOPOI.PBPOI.SymbolID)
  return symbolid_;
}
void PBPOI::set_symbolid(::google::protobuf::int32 value) {
  set_has_symbolid();
  symbolid_ = value;
  // @@protoc_insertion_point(field_set:GEOPOI.PBPOI.SymbolID)
}

// optional double DisplayHeight = 11 [default = 32];
bool PBPOI::has_displayheight() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void PBPOI::set_has_displayheight() {
  _has_bits_[0] |= 0x00000200u;
}
void PBPOI::clear_has_displayheight() {
  _has_bits_[0] &= ~0x00000200u;
}
void PBPOI::clear_displayheight() {
  displayheight_ = 32;
  clear_has_displayheight();
}
double PBPOI::displayheight() const {
  // @@protoc_insertion_point(field_get:GEOPOI.PBPOI.DisplayHeight)
  return displayheight_;
}
void PBPOI::set_displayheight(double value) {
  set_has_displayheight();
  displayheight_ = value;
  // @@protoc_insertion_point(field_set:GEOPOI.PBPOI.DisplayHeight)
}

// optional uint32 ShiningColor = 12 [default = 0];
bool PBPOI::has_shiningcolor() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PBPOI::set_has_shiningcolor() {
  _has_bits_[0] |= 0x00000020u;
}
void PBPOI::clear_has_shiningcolor() {
  _has_bits_[0] &= ~0x00000020u;
}
void PBPOI::clear_shiningcolor() {
  shiningcolor_ = 0u;
  clear_has_shiningcolor();
}
::google::protobuf::uint32 PBPOI::shiningcolor() const {
  // @@protoc_insertion_point(field_get:GEOPOI.PBPOI.ShiningColor)
  return shiningcolor_;
}
void PBPOI::set_shiningcolor(::google::protobuf::uint32 value) {
  set_has_shiningcolor();
  shiningcolor_ = value;
  // @@protoc_insertion_point(field_set:GEOPOI.PBPOI.ShiningColor)
}

// optional uint32 FontNameIndex = 13 [default = 0];
bool PBPOI::has_fontnameindex() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PBPOI::set_has_fontnameindex() {
  _has_bits_[0] |= 0x00000040u;
}
void PBPOI::clear_has_fontnameindex() {
  _has_bits_[0] &= ~0x00000040u;
}
void PBPOI::clear_fontnameindex() {
  fontnameindex_ = 0u;
  clear_has_fontnameindex();
}
::google::protobuf::uint32 PBPOI::fontnameindex() const {
  // @@protoc_insertion_point(field_get:GEOPOI.PBPOI.FontNameIndex)
  return fontnameindex_;
}
void PBPOI::set_fontnameindex(::google::protobuf::uint32 value) {
  set_has_fontnameindex();
  fontnameindex_ = value;
  // @@protoc_insertion_point(field_set:GEOPOI.PBPOI.FontNameIndex)
}

// optional int32 FontSize = 14 [default = 18];
bool PBPOI::has_fontsize() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PBPOI::set_has_fontsize() {
  _has_bits_[0] |= 0x00000100u;
}
void PBPOI::clear_has_fontsize() {
  _has_bits_[0] &= ~0x00000100u;
}
void PBPOI::clear_fontsize() {
  fontsize_ = 18;
  clear_has_fontsize();
}
::google::protobuf::int32 PBPOI::fontsize() const {
  // @@protoc_insertion_point(field_get:GEOPOI.PBPOI.FontSize)
  return fontsize_;
}
void PBPOI::set_fontsize(::google::protobuf::int32 value) {
  set_has_fontsize();
  fontsize_ = value;
  // @@protoc_insertion_point(field_set:GEOPOI.PBPOI.FontSize)
}

// optional uint32 FontColor = 15 [default = 0];
bool PBPOI::has_fontcolor() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PBPOI::set_has_fontcolor() {
  _has_bits_[0] |= 0x00000080u;
}
void PBPOI::clear_has_fontcolor() {
  _has_bits_[0] &= ~0x00000080u;
}
void PBPOI::clear_fontcolor() {
  fontcolor_ = 0u;
  clear_has_fontcolor();
}
::google::protobuf::uint32 PBPOI::fontcolor() const {
  // @@protoc_insertion_point(field_get:GEOPOI.PBPOI.FontColor)
  return fontcolor_;
}
void PBPOI::set_fontcolor(::google::protobuf::uint32 value) {
  set_has_fontcolor();
  fontcolor_ = value;
  // @@protoc_insertion_point(field_set:GEOPOI.PBPOI.FontColor)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StringTable::kSFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StringTable::StringTable()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_geopoi_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GEOPOI.StringTable)
}
StringTable::StringTable(const StringTable& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      s_(from.s_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GEOPOI.StringTable)
}

void StringTable::SharedCtor() {
  _cached_size_ = 0;
}

StringTable::~StringTable() {
  // @@protoc_insertion_point(destructor:GEOPOI.StringTable)
  SharedDtor();
}

void StringTable::SharedDtor() {
}

void StringTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StringTable& StringTable::default_instance() {
  protobuf_geopoi_2eproto::InitDefaults();
  return *internal_default_instance();
}

StringTable* StringTable::New(::google::protobuf::Arena* arena) const {
  StringTable* n = new StringTable;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StringTable::Clear() {
// @@protoc_insertion_point(message_clear_start:GEOPOI.StringTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  s_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StringTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:GEOPOI.StringTable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string s = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_s()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GEOPOI.StringTable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GEOPOI.StringTable)
  return false;
#undef DO_
}

void StringTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GEOPOI.StringTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string s = 1;
  for (int i = 0, n = this->s_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->s(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:GEOPOI.StringTable)
}

size_t StringTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GEOPOI.StringTable)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated string s = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->s_size());
  for (int i = 0, n = this->s_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->s(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StringTable::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StringTable*>(&from));
}

void StringTable::MergeFrom(const StringTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GEOPOI.StringTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  s_.MergeFrom(from.s_);
}

void StringTable::CopyFrom(const StringTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GEOPOI.StringTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringTable::IsInitialized() const {
  return true;
}

void StringTable::Swap(StringTable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StringTable::InternalSwap(StringTable* other) {
  using std::swap;
  s_.InternalSwap(&other->s_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string StringTable::GetTypeName() const {
  return "GEOPOI.StringTable";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StringTable

// repeated string s = 1;
int StringTable::s_size() const {
  return s_.size();
}
void StringTable::clear_s() {
  s_.Clear();
}
const ::std::string& StringTable::s(int index) const {
  // @@protoc_insertion_point(field_get:GEOPOI.StringTable.s)
  return s_.Get(index);
}
::std::string* StringTable::mutable_s(int index) {
  // @@protoc_insertion_point(field_mutable:GEOPOI.StringTable.s)
  return s_.Mutable(index);
}
void StringTable::set_s(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:GEOPOI.StringTable.s)
  s_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void StringTable::set_s(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:GEOPOI.StringTable.s)
  s_.Mutable(index)->assign(std::move(value));
}
#endif
void StringTable::set_s(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  s_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:GEOPOI.StringTable.s)
}
void StringTable::set_s(int index, const char* value, size_t size) {
  s_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GEOPOI.StringTable.s)
}
::std::string* StringTable::add_s() {
  // @@protoc_insertion_point(field_add_mutable:GEOPOI.StringTable.s)
  return s_.Add();
}
void StringTable::add_s(const ::std::string& value) {
  s_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:GEOPOI.StringTable.s)
}
#if LANG_CXX11
void StringTable::add_s(::std::string&& value) {
  s_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:GEOPOI.StringTable.s)
}
#endif
void StringTable::add_s(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  s_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:GEOPOI.StringTable.s)
}
void StringTable::add_s(const char* value, size_t size) {
  s_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:GEOPOI.StringTable.s)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
StringTable::s() const {
  // @@protoc_insertion_point(field_list:GEOPOI.StringTable.s)
  return s_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
StringTable::mutable_s() {
  // @@protoc_insertion_point(field_mutable_list:GEOPOI.StringTable.s)
  return &s_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBPOITile::kVersionFieldNumber;
const int PBPOITile::kTileKeyFieldNumber;
const int PBPOITile::kStringTableFieldNumber;
const int PBPOITile::kPOISFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBPOITile::PBPOITile()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_geopoi_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GEOPOI.PBPOITile)
}
PBPOITile::PBPOITile(const PBPOITile& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      pois_(from.pois_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_stringtable()) {
    stringtable_ = new ::GEOPOI::StringTable(*from.stringtable_);
  } else {
    stringtable_ = NULL;
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&tilekey_) -
    reinterpret_cast<char*>(&version_)) + sizeof(tilekey_));
  // @@protoc_insertion_point(copy_constructor:GEOPOI.PBPOITile)
}

void PBPOITile::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&stringtable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tilekey_) -
      reinterpret_cast<char*>(&stringtable_)) + sizeof(tilekey_));
}

PBPOITile::~PBPOITile() {
  // @@protoc_insertion_point(destructor:GEOPOI.PBPOITile)
  SharedDtor();
}

void PBPOITile::SharedDtor() {
  if (this != internal_default_instance()) delete stringtable_;
}

void PBPOITile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PBPOITile& PBPOITile::default_instance() {
  protobuf_geopoi_2eproto::InitDefaults();
  return *internal_default_instance();
}

PBPOITile* PBPOITile::New(::google::protobuf::Arena* arena) const {
  PBPOITile* n = new PBPOITile;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBPOITile::Clear() {
// @@protoc_insertion_point(message_clear_start:GEOPOI.PBPOITile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pois_.Clear();
  if (has_stringtable()) {
    GOOGLE_DCHECK(stringtable_ != NULL);
    stringtable_->::GEOPOI::StringTable::Clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 6u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tilekey_) -
        reinterpret_cast<char*>(&version_)) + sizeof(tilekey_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PBPOITile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:GEOPOI.PBPOITile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 Version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 TileKey = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_tilekey();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tilekey_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .GEOPOI.StringTable StringTable = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stringtable()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .GEOPOI.PBPOI POIS = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pois()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GEOPOI.PBPOITile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GEOPOI.PBPOITile)
  return false;
#undef DO_
}

void PBPOITile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GEOPOI.PBPOITile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 Version = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->version(), output);
  }

  // required int64 TileKey = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->tilekey(), output);
  }

  // required .GEOPOI.StringTable StringTable = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->stringtable_, output);
  }

  // repeated .GEOPOI.PBPOI POIS = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pois_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->pois(static_cast<int>(i)), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:GEOPOI.PBPOITile)
}

size_t PBPOITile::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GEOPOI.PBPOITile)
  size_t total_size = 0;

  if (has_stringtable()) {
    // required .GEOPOI.StringTable StringTable = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stringtable_);
  }

  if (has_version()) {
    // required int64 Version = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->version());
  }

  if (has_tilekey()) {
    // required int64 TileKey = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tilekey());
  }

  return total_size;
}
size_t PBPOITile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GEOPOI.PBPOITile)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .GEOPOI.StringTable StringTable = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stringtable_);

    // required int64 Version = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->version());

    // required int64 TileKey = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tilekey());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .GEOPOI.PBPOI POIS = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->pois_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pois(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPOITile::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PBPOITile*>(&from));
}

void PBPOITile::MergeFrom(const PBPOITile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GEOPOI.PBPOITile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pois_.MergeFrom(from.pois_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_stringtable()->::GEOPOI::StringTable::MergeFrom(from.stringtable());
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000004u) {
      tilekey_ = from.tilekey_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PBPOITile::CopyFrom(const PBPOITile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GEOPOI.PBPOITile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPOITile::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->pois())) return false;
  return true;
}

void PBPOITile::Swap(PBPOITile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBPOITile::InternalSwap(PBPOITile* other) {
  using std::swap;
  pois_.InternalSwap(&other->pois_);
  swap(stringtable_, other->stringtable_);
  swap(version_, other->version_);
  swap(tilekey_, other->tilekey_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string PBPOITile::GetTypeName() const {
  return "GEOPOI.PBPOITile";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBPOITile

// required int64 Version = 1;
bool PBPOITile::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PBPOITile::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
void PBPOITile::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void PBPOITile::clear_version() {
  version_ = GOOGLE_LONGLONG(0);
  clear_has_version();
}
::google::protobuf::int64 PBPOITile::version() const {
  // @@protoc_insertion_point(field_get:GEOPOI.PBPOITile.Version)
  return version_;
}
void PBPOITile::set_version(::google::protobuf::int64 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:GEOPOI.PBPOITile.Version)
}

// required int64 TileKey = 2;
bool PBPOITile::has_tilekey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PBPOITile::set_has_tilekey() {
  _has_bits_[0] |= 0x00000004u;
}
void PBPOITile::clear_has_tilekey() {
  _has_bits_[0] &= ~0x00000004u;
}
void PBPOITile::clear_tilekey() {
  tilekey_ = GOOGLE_LONGLONG(0);
  clear_has_tilekey();
}
::google::protobuf::int64 PBPOITile::tilekey() const {
  // @@protoc_insertion_point(field_get:GEOPOI.PBPOITile.TileKey)
  return tilekey_;
}
void PBPOITile::set_tilekey(::google::protobuf::int64 value) {
  set_has_tilekey();
  tilekey_ = value;
  // @@protoc_insertion_point(field_set:GEOPOI.PBPOITile.TileKey)
}

// required .GEOPOI.StringTable StringTable = 3;
bool PBPOITile::has_stringtable() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PBPOITile::set_has_stringtable() {
  _has_bits_[0] |= 0x00000001u;
}
void PBPOITile::clear_has_stringtable() {
  _has_bits_[0] &= ~0x00000001u;
}
void PBPOITile::clear_stringtable() {
  if (stringtable_ != NULL) stringtable_->::GEOPOI::StringTable::Clear();
  clear_has_stringtable();
}
const ::GEOPOI::StringTable& PBPOITile::stringtable() const {
  const ::GEOPOI::StringTable* p = stringtable_;
  // @@protoc_insertion_point(field_get:GEOPOI.PBPOITile.StringTable)
  return p != NULL ? *p : *reinterpret_cast<const ::GEOPOI::StringTable*>(
      &::GEOPOI::_StringTable_default_instance_);
}
::GEOPOI::StringTable* PBPOITile::mutable_stringtable() {
  set_has_stringtable();
  if (stringtable_ == NULL) {
    stringtable_ = new ::GEOPOI::StringTable;
  }
  // @@protoc_insertion_point(field_mutable:GEOPOI.PBPOITile.StringTable)
  return stringtable_;
}
::GEOPOI::StringTable* PBPOITile::release_stringtable() {
  // @@protoc_insertion_point(field_release:GEOPOI.PBPOITile.StringTable)
  clear_has_stringtable();
  ::GEOPOI::StringTable* temp = stringtable_;
  stringtable_ = NULL;
  return temp;
}
void PBPOITile::set_allocated_stringtable(::GEOPOI::StringTable* stringtable) {
  delete stringtable_;
  stringtable_ = stringtable;
  if (stringtable) {
    set_has_stringtable();
  } else {
    clear_has_stringtable();
  }
  // @@protoc_insertion_point(field_set_allocated:GEOPOI.PBPOITile.StringTable)
}

// repeated .GEOPOI.PBPOI POIS = 4;
int PBPOITile::pois_size() const {
  return pois_.size();
}
void PBPOITile::clear_pois() {
  pois_.Clear();
}
const ::GEOPOI::PBPOI& PBPOITile::pois(int index) const {
  // @@protoc_insertion_point(field_get:GEOPOI.PBPOITile.POIS)
  return pois_.Get(index);
}
::GEOPOI::PBPOI* PBPOITile::mutable_pois(int index) {
  // @@protoc_insertion_point(field_mutable:GEOPOI.PBPOITile.POIS)
  return pois_.Mutable(index);
}
::GEOPOI::PBPOI* PBPOITile::add_pois() {
  // @@protoc_insertion_point(field_add:GEOPOI.PBPOITile.POIS)
  return pois_.Add();
}
::google::protobuf::RepeatedPtrField< ::GEOPOI::PBPOI >*
PBPOITile::mutable_pois() {
  // @@protoc_insertion_point(field_mutable_list:GEOPOI.PBPOITile.POIS)
  return &pois_;
}
const ::google::protobuf::RepeatedPtrField< ::GEOPOI::PBPOI >&
PBPOITile::pois() const {
  // @@protoc_insertion_point(field_list:GEOPOI.PBPOITile.POIS)
  return pois_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace GEOPOI

// @@protoc_insertion_point(global_scope)
